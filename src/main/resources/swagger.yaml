openapi: 3.0.3
info:
  title: FocusShield Extension Backend API
  description: API for managing user authentication and focus mode configurations for the Chrome extension.
  version: 1.0.0

servers:
  - url: http://localhost:8181
    description: Local development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      description: Represents a user in the FocusShield system.
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier of the user
        firstname:
          type: string
          description: First name of the user
          minLength: 1
          maxLength: 50
        surname:
          type: string
          description: Last name of the user
          minLength: 1
          maxLength: 50
        email:
          type: string
          format: email
          description: Email address of the user
          minLength: 5
          maxLength: 100
        username:
          type: string
          description: User's usual or system username. Must be unique.
          minLength: 3
          maxLength: 50
        password:
          type: string
          description: Password (minimum 8 characters)
          minLength: 8
        universalId:
          type: string
          format: uuid
          description: External or universal identifier of the user (UUID)
        phone:
          type: string
          description: Phone number in international E.164 format
          pattern: '^\+?[1-9]\d{1,14}$'
        dateOfBirth:
          type: string
          format: date
          description: >
            Date of birth of the user.
            Format must be YYYY-MM-DD
        roles:
          type: array
          description: Roles assigned to the user
          items:
            $ref: '#/components/schemas/Role'
        createdAt:
          type: string
          format: date-time
          description: User creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last modification timestamp
        status:
          type: string
          description: User's account status
          enum:
            - REGISTERED
            - VALIDATED
            - BLOCKED
            - BANNED
        authenticationCode:
          type: string
          description: Temporary authentication or OTP code
        dbfamin:
          type: string
          format: uuid
          description: Identifier for two-factor authentication configuration
        example:
          type: string
          description: Example user status
          enum:
            - ACTIVE
            - INACTIVE
            - PENDING
      required:
        - email
        - username
        - password

    Role:
      type: object
      properties:
        roleId:
          type: string
          format: uuid
        roleName:
          type: string
          description: Role name. Must be unique across all roles.
          minLength: 1
          maxLength: 50
        level:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    FocusConfig:
      type: object
      properties:
        id:
          type: string
          format: uuid
        blockedSites:
          type: array
          items:
            type: string
        durationMinutes:
          type: integer
        active:
          type: boolean
        savedAt:
          type: string
          format: date-time
        userId:
          type: string
          format: uuid
        customSelectors:
          type: object
          additionalProperties:
            type: string
          description: JSON object for custom CSS selectors by site (key is site name, value is CSS selector string)
        pauseStartTime: # Pour les horaires de pause
          type: string
          format: time # ou simple string si vous gérez juste 'HH:MM'
        pauseEndTime:
          type: string
          format: time # ou simple string

    RegisterRequest:
      type: object
      required:
        - username
        - email
        - password
      properties:
        firstname:
          type: string
          description: First name of the user
          minLength: 1 # Deviendra @Size(min=1)
          maxLength: 50 # Deviendra @Size(max=50)
          nullable: false # Deviendra @jakarta.annotation.Nullable si openApiNullable est activé
        surname:
          type: string
          description: Last name of the user
          minLength: 1
          maxLength: 50
        email:
          type: string
          format: email
          description: Email address of the user
          minLength: 5
          maxLength: 100
        username:
          type: string
          description: User's usual or system username. Must be unique.
          minLength: 3
          maxLength: 50
        password:
          type: string
          description: Password (minimum 8 characters)
          minLength: 8
        phone:
          type: string
          description: Phone number in international E.164 format
          pattern: '^\+?[1-9]\d{1,14}$'
        dateOfBirth:
          type: string
          format: date
          description: >
            Date of birth of the user.
            Format must be YYYY-MM-DD

    UpdateRequest:
      type: object
      properties:
        firstname:
          type: string
          description: First name of the user
          minLength: 1
          maxLength: 50
        surname:
          type: string
          description: Last name of the user
          minLength: 1
          maxLength: 50
        email:
          type: string
          format: email
          description: Email address of the user
          minLength: 5
          maxLength: 100
        username:
          type: string
          description: User's usual or system username
          minLength: 3
          maxLength: 50
        password:
          type: string
          description: Password (minimum 8 characters)
          minLength: 8
        phone:
          type: string
          description: Phone number in international E.164 format
          pattern: '^\+?[1-9]\d{1,14}$'
        dateOfBirth:
          type: string
          format: date
          description: >
            Date of birth of the user.
            Format must be YYYY-MM-DD

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
        password:
          type: string

    FocusConfigRequest:
      type: object
      properties:
        blockedSites:
          type: array
          items:
            type: string
        durationMinutes:
          type: integer
        active:
          type: boolean
        customSelectors: # Add this to the request schema
          type: object
          # Decide between explicit properties or additionalProperties here too,
          # I strongly recommend additionalProperties for consistency and flexibility:
          additionalProperties:
            type: string
          description: JSON object for custom CSS selectors by site
        pauseStartTime:
          type: string
          format: time
        pauseEndTime:
          type: string
          format: time

    RoleRequest:
      type: object
      required:
        - roleName
        - level
      properties:
        roleName:
          type: string
          description: Role name. Must be unique across all roles.
          minLength: 1
          maxLength: 50
        level:
          type: integer

    RoleUpdateRequest:
      type: object
      required:
        - roleName
        - level
      properties:
        roleName:
          type: string
        level:
          type: integer

    AssignRoleRequest:
      type: object
      required:
        - email
        - roleName
      properties:
        email:
          type: string
          format: email
        roleName:
          type: string

    AuthResponse:
      type: object
      properties:
        token:
          type: string
        universalId: # ← AJOUTONS CE CHAMP dans notre AuthResponse du backend pour passer universalId
          type: string
          format: uuid
          required:
            - token
            - universalId
paths:
  /api/v1/users:
    post:
      summary: Register a new user
      operationId: registerUser
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input or user already exists
    get:
      summary: Retrieves a paginated list of all users
      operationId: getAllUsers
      description: Returns a paginated list of users with optional `page` and `size` query parameters.
      tags:
        - Users
      parameters:
        - name: page
          in: query
          description: The page number to retrieve (zero-based)
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: size
          in: query
          description: The number of users per page
          required: false
          schema:
            type: integer
            minimum: 1
            default: 10
      responses:
        '200':
          description: A paginated list of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  totalElements:
                    type: integer
                    example: 50
                  totalPages:
                    type: integer
                    example: 5
                  size:
                    type: integer
                    example: 10
                  number:
                    type: integer
                    example: 0
                  numberOfElements:
                    type: integer
                    example: 10
                  last:
                    type: boolean
                    example: false
                  first:
                    type: boolean
                    example: true
        '400':
          description: Invalid page or size parameters

  /api/v1/users/{userId}:
    get:
      summary: Retrieves a user by their ID
      description: Returns a user matching the given ID, if found.
      operationId: getUserById
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          description: The unique ID of the user
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
    put:
      summary: Update user details
      operationId: updateUser
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          required: true
          description: UUID of the user to update
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input or user already exists
        '404':
          description: User not found

  /api/v1/users/login:
    post:
      summary: Authenticate user and return JWT
      operationId: login
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: JWT token returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Unauthorized

  /api/v1/focus-configs:
    post:
      summary: Save user focus configuration
      operationId: saveFocusConfiguration
      tags:
        - FocusConfiguration
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FocusConfigRequest'
      responses:
        '200':
          description: Config saved successfully
        '401':
          description: Unauthorized
    get:
      summary: Get all focus configurations for the current user
      description: Retrieves all focus configurations associated with the user identified by the `universalId` in the request (typically from headers).
      operationId: getAllConfigsForUser
      tags:
        - FocusConfiguration
      parameters:
        - name: universalId
          in: header
          required: true
          description: Unique identifier of the current user
          schema:
            type: string
      responses:
        '200':
          description: List of focus configurations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FocusConfig'
        '401':
          description: Unauthorized or missing universalId

  /api/v1/focus-configs/latest:
    get:
      summary: Retrieve user’s latest focus configuration
      operationId: getLatestFocusConfiguration
      tags:
        - FocusConfiguration
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Focus config returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FocusConfig'
        '401':
          description: Unauthorized

  /api/v1/focus-configs/{configId}:
    delete:
      summary: Delete a focus configuration by ID
      description: Deletes the focus configuration corresponding to the provided UUID.
      operationId: deleteFocusConfig
      tags:
        - FocusConfiguration
      parameters:
        - name: configId
          in: path
          required: true
          description: UUID of the focus configuration to delete
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Configuration deleted successfully (no content)
        '404':
          description: Focus configuration not found

  /api/v1/roles:
    post:
      summary: Create a new role
      operationId: createRole
      tags:
        - Roles
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRequest'
      responses:
        '201':
          description: Role created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '400':
          description: Invalid input

    get:
      summary: Get all roles
      operationId: getAllRoles
      tags:
        - Roles
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of roles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'

  /api/v1/roles/{roleId}:
    put:
      summary: Update an existing role
      operationId: updateRole
      tags:
        - Roles
      security:
        - bearerAuth: []
      parameters:
        - name: roleId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleUpdateRequest'
      responses:
        '200':
          description: Role updated successfully
        '404':
          description: Role not found
    get:
      summary: Retrieves a role by its ID
      description: Returns the role identified by the given UUID if it exists.
      operationId: getRoleById
      tags:
        - Roles
      parameters:
        - name: roleId
          in: path
          required: true
          description: The UUID of the role
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Role found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '404':
          description: Role not found
    delete:
      summary: Delete a role
      operationId: deleteRole
      tags:
        - Roles
      security:
        - bearerAuth: []
      parameters:
        - name: roleId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Role deleted successfully
        '404':
          description: Role not found

  /api/v1/users/assign-role:
    patch:
      summary: Assign a role to a user using email and role name
      operationId: assignRoleToUser
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignRoleRequest'
      responses:
        '200':
          description: Role assigned to user successfully
        '404':
          description: User or role not found
        '400':
          description: Invalid input
  /api/v1/users/unassign-role:
    patch:
      summary: Unassign a role from a user using email and role name
      operationId: unassignRoleToUser
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignRoleRequest'
      responses:
        '200':
          description: Role unassigned from user successfully
        '404':
          description: User or role not found
        '400':
          description: Invalid input
